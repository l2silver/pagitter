{
  "_args": [
    [
      "bit-mask@0.0.2-alpha",
      "/home/l2silver/pagitter/node_modules/chai-fs"
    ]
  ],
  "_from": "bit-mask@0.0.2-alpha",
  "_id": "bit-mask@0.0.2-alpha",
  "_inCache": true,
  "_installable": true,
  "_location": "/bit-mask",
  "_npmUser": {
    "email": "abbey@khrome.net",
    "name": "khrome"
  },
  "_npmVersion": "1.1.70",
  "_phantomChildren": {},
  "_requested": {
    "name": "bit-mask",
    "raw": "bit-mask@0.0.2-alpha",
    "rawSpec": "0.0.2-alpha",
    "scope": null,
    "spec": "0.0.2-alpha",
    "type": "version"
  },
  "_requiredBy": [
    "/chai-fs"
  ],
  "_resolved": "https://registry.npmjs.org/bit-mask/-/bit-mask-0.0.2-alpha.tgz",
  "_shasum": "42880fa80055151165d5fa15b331bc0459c27372",
  "_shrinkwrap": null,
  "_spec": "bit-mask@0.0.2-alpha",
  "_where": "/home/l2silver/pagitter/node_modules/chai-fs",
  "author": {
    "email": "@khrome",
    "name": "Abbey Hawk Sparrow",
    "url": "http://patternweaver.com"
  },
  "bugs": {
    "url": "https://github.com/khrome/bit-mask/issues"
  },
  "contributors": [],
  "dependencies": {
    "prime": "0.0.5-alpha"
  },
  "description": "A utility for manipulating bit masks",
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "42880fa80055151165d5fa15b331bc0459c27372",
    "tarball": "http://registry.npmjs.org/bit-mask/-/bit-mask-0.0.2-alpha.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/khrome/bit-mask",
  "keywords": [
    "bitmask",
    "file mask",
    "permissions"
  ],
  "license": "MIT",
  "main": "bit-mask.js",
  "maintainers": [
    {
      "name": "khrome",
      "email": "abbey@khrome.net"
    }
  ],
  "name": "bit-mask",
  "optionalDependencies": {},
  "readme": "bit-mask.js\n==============\nAn NPM for manipulating bit masks\n\nJust a convenient abstraction for computing bitmasks, such as file permissions. \n\n    var BitMask = require('bit-mask');\n\nBit Masks\n---------\nDeclare a new BitMask with an initial value\n\n    var mask = new BitMask(value, [base]);\n    \nSet a particular bit with a boolean\n\n    mask.setBit(position, value)\n    \nget the boolean value of a particular bit\n    \n    mask.getBit(position)\n    \nget the bits as a string of binary digits\n    \n    maks.bits()\n    \nOwnership Mask\n--------------\n\nDeclare a new Ownership Mask with an initial value\n\n    var mask = new BitMask.OwnershipMask(value);\n    \nThen you have all the functions from the BitMask plus you can get the permissions in a more readable way with:\n\n    mask.hasPermission(context, permission)\n    \nwhere context is 'user', 'group' or 'world' and permission is 'read', 'write', 'execute' and a corresponding set:\n\n    mask.setPermission(context, permission, value)\n    \nas well as a modify function which allows you to pass chmod style modifier strings as well as integer values.\n\n    mask.modify('ugo+rwx')\n    mask.modify(755);\n\nTesting\n-------\n\nRun the tests at the project root with:\n\n    mocha\n\nEnjoy,\n\n-Abbey Hawk Sparrow",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/khrome/bit-mask.git"
  },
  "version": "0.0.2-alpha"
}
